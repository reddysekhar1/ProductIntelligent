stages:
 - WhiteSourceAnalysis
 - Compile
 - Test
 - StaticCodeAnalysis
 - Package
 - Trivy
 - Push
 - CleanUp 

variables:
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA

image: maven:3.6.3-jdk-11

WhiteSourceAnalysis:
  stage: WhiteSourceAnalysis
  tags:
        - SharedDockerRunner
  script:
        - curl -LJO https://github.com/whitesource/unified-agent-distribution/raw/master/standAlone/wss_agent.sh
        - chmod +x wss_agent.sh
        - ./wss_agent.sh -c wss-productintelligent.config -d ./
  # rules:
  #    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  #      when: always
  #    - when: never
  
Code_Compile:
    stage: Compile 
    tags:
        - SharedDockerRunner
    script:
        - echo " Starting Product Intelligent code compilation " 
        - mvn clean package
        - ls target/
    artifacts: 
      paths: 
         - target/*.jar

Test:
    stage: Test
    tags:
        - SharedDockerRunner
    script:
      - echo " Starting Product Intelligent Tests"
      - java -version
      - mvn test

StaticCodeAnalysis:
  stage: StaticCodeAnalysis
  tags:
      - SharedDockerRunner
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo " Static code analysis productIntelligent"
    - java -version
    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts -Djavax.net.ssl.keyStore=/etc/ssl/certs/java/cacerts

  allow_failure: true
  after_script:
    - echo " Static code analysis of Product intelligent  project = ${CI_JOB_STATUS} "

Docker-Build image:
    stage: Package
    image: docker:19.03.12
    tags:
        - SharedDockerRunner
    script:
      - echo " Building docker image for Product Intelligent"
      - ls target/
      - docker build -f Dockerfile -t productintelligent:latest .

Container Scanning:
  stage: Trivy
  tags:
      - SharedDockerRunner
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]

  script:
    - trivy --version
    - time trivy image --clear-cache
     # update vulnerabilities db
    - time trivy --cache-dir .$TRIVY_CACHE_DIR image --download-db-only --no-progress
    - echo $CI_PROJECT_DIR
      #Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --cache-dir .$TRIVY_CACHE_DIR image --exit-code 0 --no-progress --format template --template "@/contrib/gitlab.tpl"
       --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "productintelligent:latest"
      #Prints full report
    - time trivy --cache-dir .$TRIVY_CACHE_DIR image --no-progress "productintelligent:latest"
     # Fail on critical vulnerabilities
     #- time trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "productintelligent:${DOCKER_IMAGE_TAG}"

  cache:
    paths:
       - .trivycache/

  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json


Push_Image_to_ACR:
    stage: Push
    image: docker:19.03.12
    #only:
    #   - master
    tags:
        - SharedDockerRunner
  #  only:
  #      - master
    script: 
       - echo " Deploying productIntelligent image on container registry "
       - docker login $ACR_SERVER -u demok8 -p $ACR_PASSWORD
       - docker tag productintelligent:latest $ACR_SERVER/intelliservice/productintelligent:$DOCKER_IMAGE_TAG
       - docker push $ACR_SERVER/intelliservice/productintelligent:$DOCKER_IMAGE_TAG

DeleteDockerImage:
    stage: CleanUp
    image: docker:19.03.12
    tags:
        - SharedDockerRunner
  #  only:
  #      - master
    script: 
       - echo " Deleting the deployed Image from Runner to save space"
       - docker image rm -f $(docker images -q productintelligent:latest)


